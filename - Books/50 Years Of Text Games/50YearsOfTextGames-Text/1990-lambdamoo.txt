LambdaMOO

1990

Pavel Curtis
Early Contributers: Tim Allen, Judy Anderson, Roger Crew, and Erik Ostrom
Style: MUD
Debuted: Oct 30, 1990 (beta), Feb 5, 1991 (announced)
Launch Platform: Unix (server), Telnet (client), Language: C (server)
MOO (world) 

Opening Text:

	LambdaMOO is a new kind of society, where thousands of people voluntarily come together from all over the world. What these people say or do may not always be to your liking; as when visiting any international city, it is wise to be careful who you associate with and what you say.


	*** Connected ***
	The Coat Closet
	The closet is a dark, cramped space. It appears to be very crowded in here; you keep bumping into what feels like coats, boots, and other people (apparently sleeping). One useful thing that you’ve discovered in your bumbling about is a metal doorknob set at waist level into what might be a door.

	open door

	You open the closet door and leave the darkness for the living room, closing the door behind you so as not to wake the sleeping people inside.
	The Living Room
	It is very bright, open, and airy here, with large plate-glass windows looking southward over the pool to the gardens beyond. On the north wall, there is a rough stonework fireplace. The east and west walls are almost completely covered with large, well-stocked bookcases. An exit in the northwest corner leads to the kitchen and, in a more northerly direction, to the entrance hall. The door into the coat closet is at the north end of the east wall, and at the south end is a sliding glass door leading out onto a wooden deck. There are two sets of couches, one clustered around the fireplace and one with a view out the windows.
	You see Cockatoo, README for New MOOers, Welcome Poster, a fireplace, The Daily Whale, Helpful Person Finder, The Birthday Machine, a map of LambdaHouse, and lag meter here. 
	Hagbard, Rusty (distracted), Porcupine (asleep), Primate’s_Stick, and Purple_Guest are here.
	say Hello, world.
	You say, “Hello, world.”
	Purple_Guest laughs.

A decade after the original MUD demonstrated the appeal of a shared virtual world, multi-user dungeons had become an established genre. As more university students gained access to computers and unmetered internet time, they created first dozens, then hundreds and hundreds, of MUD clones. The earliest were simple knockoffs, but soon they had evolved into increasingly sophisticated simulations of fantastical otherworlds.

This complexity had largely taken the form of more and more elaborate rules for combat, skill advancement, magic spells and items, or world simulation. By the end of the 80s some MUDs offered dozens of character classes to choose from, each with complex progressions of skill trees; player-run guilds with arcane hierarchies of power; hundreds of unique weapons and monsters; and complex weather systems or day/night cycles. But some mudders had grown bored with the endless grind of combat and leveling. A few had started to wonder if it might be possible to base a virtual world around a different central conceit.

In many MUDs, the ultimate goal was to rise to the highest experience level and become a wizard. To reward such long-term community engagement, wizards were often granted special powers and responsibilities: the power to teleport, for instance, or to enforce order by resolving disputes or banishing troublemakers. But the most tantalizing wizard ability of all was the power of creation. Some MUDs gave wizards access to new verbs that let them literally reshape the world, creating new rooms and connections, unique monsters and objects, and original puzzles and quests. Becoming a wizard could take tremendous effort—hundreds or thousands of hours of playtime, not to mention the social skills necessary to ingratiate yourself to the existing wizard community—but what a reward to look forward to!

Near the end of 1988, a short-lived MUD called Monster [Richard Skrenta] launched with a simple but intriguing idea: what if you didn’t have to rise through the ranks and earn your wizardhood to help make the world? What if ultimate power was given out to everyone? While it hadn’t been the first game to experiment with this notion, Monster caught the attention of Carnegie Mellon University grad student James Aspnes, who ended up streamlining and rewriting the popular package AberMUD [Alan Cox et al. 1987] into a version that stripped out the extensive combat, magic, stats, and advancement rules and gave all players the generous building permissions of a wizard. He called his engine TinyMUD [1989], and he hoped the lack of premade content would force players to start building their own, perhaps based on something other than combat. He suggested the “D” in MUD didn’t have to stand for dungeon. What about domain, or dimension?

While many mudders shrugged at the weird experiment and kept slaying virtual orcs, some found the concept wildly intriguing. Within a few months, the original TinyMUD had to be shut down for exceeding the limitations of its host computer—user-made content had completely overwhelmed it. But Aspnes had freely shared the server code and various clones sprung up to take its place, often further iterating on and improving the software. Soon, spin-offs like TinyMUCK [Stephen White 1990] and TinyMUSH [Larry Foard 1990] were everywhere.

In the summer of 1990, a Canadian student named Stephen White released a package called MOO, which stood for MUD, Object-Oriented. White realized that for players to truly be creative in a virtual world, the power to make new rooms and objects wasn’t enough. They would need the ability to create new rules and systems too. But that would require an embedded programming language capable of altering the very world its user was immersed in, and an ontology allowing that world to be changed in a simple and consistent manner. Object-oriented programming was becoming increasingly popular, so White decided to build a system where everything in the world—from players, to items, to rooms, to the exits connecting those rooms—was represented as an object that could be created or modified by special commands. Objects could have associated properties and routines; for example, a property called description might be common to all objects, or code specifying that only the creator of an object could modify it.

But object-oriented programming also allowed for a system of inheritance, which could let an object “descend” from an ancestor to gain its qualities. Useful boilerplate objects like Room or Person might be created first, defined with all the code and properties each needed to function. A Room might inherit a generic object’s description property and be given a new one, exit_list, that stored connections to other rooms. One might then make a more specific Room called Outdoor Room, inheriting the features of its parent but adding new behaviors to simulate external areas where sun and sky were visible. Finally, one might add a child of Outdoor Room called In the Meadow to simulate one such room in particular. Inheritance provided a simple and well-understood conceptual framework and technical underpinning, allowing for reuse of code and keeping the universe’s fundamental structure orderly and predictable. Crucially, it also enabled players to easily build on each other’s contributions.

White demonstrated his MOO code base with an alpha world he never widely publicized, but among those who discovered it was Pavel Curtis, a researcher at the Xerox PARC lab in Palo Alto, California. PARC had become well enshrined as a preeminent institution of forward-thinking computer research, having birthed innovations like the graphical user interface, the laser printer, the Ethernet protocol, and some of the first object-oriented programming languages. Curtis, who was researching language design and interested in the challenges of teaching programming to kids, had recently stumbled across MUD culture and became intrigued by the potential of White’s MOO. Could this be the next big thing for PARC—shared virtual environments that any user could help design? White’s enthusiasm for the project had flagged, so with his permission—and having been granted free rein by the PARC bosses to set up a long-term virtual worlds research project—Curtis took over work on a revised new version of MOO. His character on White’s server was named Lambda (after a term important in his favorite programming language, Scheme), so he decided to give both his software and the first test world running it the name LambdaMOO.

Like many first-time interactive fiction authors, the first thing Curtis built was his own house. As he invited in a first wave of friends and colleagues to test the system, he encouraged them to extend the environment but keep it thematically consistent. One of his earliest collaborators was Judy Anderson, a former fellow resident of the house he was virtually recreating. Judy, whose avatar in this mirror world was called yduJ, took to the role of possibility architect with gusto. She soon began coding interesting objects for visitors to interact with, like an interactive hot tub with working jets and temperature controls, and created the game’s first puzzle (disabling an obnoxious burglar alarm). yduJ and others in the first wave of residents also extended the house beyond its original modest footprint, creating new wings, hallways, and rooms with the @dig command, and new objects to fill them via @create.

By February 1991, when Curtis opened LambdaMOO to the public with an announcement on the Usenet group rec.games.mud, the house had swelled to the point that it was already easy to get lost. Unlike other TinyMUD-likes with no enforcement of a consistent universe—a wizard’s castle might adjoin a busy spaceport, or a recreation of a real Chicago dive bar—LambdaMOO took pains to enforce a consensus reality for its virtual space, a fictional framework that nonetheless might allow almost any kind of contribution:

	LambdaMOO takes place inside and on the grounds of a large, sprawling mansion.… The house is also very large, so large in fact that the current occupants themselves have only ever explored a tiny portion of it. What may be going on in other parts of the house is anybody’s guess.… With nobody having the means or inclination to patrol the whole place, almost anything could be squatting here.
	  
	South of the occupied part of the house lie the palatial gardens. Many parts of the gardens are still being tended and cared for.… Of course, there are other parts of the gardens that have become quite overgrown and wild, sheltering who knows what.
	
	The land underneath the house is also full of strange tunnels, odd caverns, perhaps a forgotten mine, and other amusements. Of course, except for the wine cellars, the current occupants are completely unaware of such developments.

LambdaMOO grew slowly at first, but it grew. After a year of building, with more and more keen creators joining every day, the dimensions of Lambda House had taken on dizzyingly fractal qualities. The grounds outside extended past lawns and gardens through thickets and rolling hills, eventually stretching to distant beaches and lands beyond. Pocket dimensions sprung up within the house itself, like the Looking-Glass Tavern, which could be visited by gazing into a mirror in the foyer, or an entire miniature town built on a model railroad table in the guest bedroom, which one could magically shrink down to explore. A nightclub in Tiny Town became one of the MOO’s most happening hangout spots, and its miniature residential district was a popular place to @dig a virtual home. Another common place to put down roots was the lavish hotel found inside a red plastic piece in the working Monopoly set in the dining room. Treehouses, rooftop observatories, hidden underground grottoes, crawlspaces between the walls—the house and its grounds had become a wonderland of creative architecture and inspired worldbuilding. In this place of “pure communication, where looks don’t matter and only the best writers get laid,”16 descriptions were often richly evocative:

	The Sleeping Forest
	The trees here are absolutely enormous. Their trunks are each at least thirty feet in diameter, and stretch upwards forever, disappearing finally into the mist far above. The light here is dim, and the silence is nearly absolute. The plants which grow all around are a deep green, and are soft and silent under your feet.

	Outside of Barn
	You’re standing outside of an old, wooden barn that probably received its last coat of red paint over a decade ago. The grey-brown shingles of the roof are covered with moss and withered brown leaves, and beneath the corners you see clumps of twigs, dried grass and string where swallows have built their nests. You can see them flying sometimes in the evening: swift, purplegreen, darting after insects. 
	
	Despite its overall look of gentle decrepitude, it’s clear that somebody’s been here. All over the front of the barn, strange objects are affixed—some as old and weathered as the structure itself, but some fairly new. You see plastic dollheads, their pink cheeks and glassy blue eyes startling against the faded wood; animal bones painted bright colors with bits of mirrors or bright glass affixed to them; bicycle wheels and fanblades flecked with rust, warped 45 RPM vinyl records, painted spirals and incomprehensible words inscribed in spidery calligraphy around them.

	North Wing Fireside Hall
	[…] The air here is filled with the smell of spruce and pine, wafting through the air from the fireplace which sits in the center of the room. The room is decorated in a comfortable dark brown, with a varnished hardwood floor and thick dark oak beams supporting the ceiling, and giving the room a general sense of solidity.
	
	Lined up against the western wall stand four or five armored statues, with swords and axes in their metallic hands […] The fireplace sits in a depression in the center of the room, radiating cozy warmth throughout the room. A wide, circular couch surrounds it, covered in a lush upholstery.

Unlike in single-player IF, these were spaces designed for lingering, for inhabiting: stages for conversations and seductions and meetings with friends.

Increasingly, both on LambdaMOO and elsewhere, these worlds were referred to as virtual realities. Contrary to popular conceptions of VR involving cutting-edge graphics or full-immersion bodysuits—fundamentally, a thing of the future—proponents of MOO-VR saw text as a far superior (and already available) way to directly engage the imagination and experience a sense of immersive transportation. And the key to that immersion was collaboration, not only between the people who were playing but between them and the simulation itself. Good players could, of course, emote in ways that referenced the room they occupied and the objects it contained:

	:collapses on the old couch, putting his feet up on the creaking end table.
	Kelvin collapses on the old couch, putting his feet up on the creaking end table.

But the ability to program from within the virtual world let the software become a collaborative partner in the project of maintaining its fictional consistency:

	The living room’s description mentioned a couch (two sets of couches, actually) for the longest time. Then someone built an actual VR couch. You can sit on it, shove people off, stuff things into it, jostle it, reupholster it, search for things, and (occasionally) fall in. From under the couch cushions, you can shout, or return something that falls in (from someone else’s pockets, to be sure).13

These behaviors were created through the straightforward but powerful MOO programming language. For instance, a popular in-game coding tutorial would teach you how to create your own pet rock. To program the ability to pet your pet rock, you needed to type in three commands at the prompt—commands no different, from the system’s perspective, than any other player input like look or go north:

	@verb rock:pet this none none rxd
	@program rock:pet
	player:tell("You pet the rock. Nothing happens."); .

The words this none none in the first line define the specification of the pet verb from the rock’s perspective: it takes a single direct object this (the rock) and no preposition or indirect object. The flags rxd indicate the verb is readable by others (anyone can pet the rock), callable by other verbs like a function, and will show a traceback if its program crashes. The dot at the end of the third line indicates the program being entered is finished. A player might weave these instructions into a stream of conversation with friends and interaction with the existing environment. Reprogramming the world was just another fundamental part of existing within it.

MOO programs could become surprisingly complex, able to interface with nearly any aspect of the simulation they ran within, calling functions to query the game state or piping messages to other parts of the virtual world. As more residents mastered the language, the objects they created became more and more elaborate. Advanced programmers were soon creating toys like the helicopter on the west lawn, which had over twenty custom verbs and included extensive help text:

	The helicopter’s description and behavior change depending on whether it’s running or stopped, parked, hovering, or in flight. If you land on the asphalt roof, they’ll hear the rumble of the engine in the living room.… There are appropriate messages for spectators outside the helicopter when it takes off, flies overhead, and lands. These messages also differ depending on how high the helicopter is flying. If you are at the landing site when someone crashes it, you get to see a team of engineers truck it in and put it back together.… As you overfly locations, people on the ground are notified.… Aircraft cast shadows, which are actual objects that are moved to the various locations the aircraft overfly. This enables people on the ground to wave to people in the aircraft (type wave at helicopter for example). Helicopters can only be landed at catalogued outdoor rooms that have wind socks. 

Object inheritance led to a culture of reuse and sharing. The creator of a useful object could set a fertile flag that would let others create child objects from it, and soon whole catalogs of useful parent objects were available in the house’s library, with names like Simple Lockable Thing, Generic Amplifiable Musical Instrument, Generic Programmable Puppet, or Generic Aircraft (from which the helicopter descended). Improved children could themselves be made fertile, leading to long chains of iterative refinements and ever-increasing functionality. Programmer-players created camcorders that could record real-time logs of MOO happenings, saving them to the viewable text buffer of a child of Generic Videocassette. Elaborate recreations of real-world pastimes were developed—board games; laser tag arenas; even LambdaMOO ports of classic text games, like a Super Star Trek that whisked players to the bridge of a starship to navigate a three-dimensional grid of galactic sectors. Certain stock NPC classes became useful to architects building clubs or hangouts, such as a Waiter who could show up when a group claimed a table, take drink orders, and return minutes later to distribute beverage objects with drink verbs and simulations of fullness.

Players could even adjust the inheritance tree of their own avatar, the object representing their digital self. One popular generic player class provided verbs to adjust how the system described your appearance and actions, so for instance one could morph into a dragon that would “thunder” rather than “say” any words spoken aloud. Another player class included a range of helpful features for cybersex, including ways to write descriptions of oneself at various states of undress, and to grant other players permission to use various verbs to uncover them.

Within this rich world—which Pavel Curtis called a “prose-based reality”—a village was born. Many MUDs had spawned communities, often strong ones with bonds that spilled out into the real world. But through some combination of LambdaMOO’s appeal to older players less interested in pure gameplay, its consistent fictional frame that aided suspension of disbelief, and the way players could alter that frame and reshape it to make a world they wanted to live in, Curtis’s experiment rapidly evolved a proper society steeped in a dense network of ideas, friendships, romances, and, soon enough, rivalries. Within a year of launch, there were thousands of registered players and often more than a hundred online at peak hours, enough to sustain a vibrancy of discourse that few other virtual spaces had yet achieved. A hundred simultaneous users might seem small by today’s standards, but was in many ways ideal—the size of a large party that never ended, with conversations spilling out into various wings and back porches, and a healthy network of friendly faces, rival cliques, and shared social spaces. It was the perfect shape for a single community.

The MOO had arrived at a pivotal moment in the growing cultural awareness of the internet. Journalist Julian Dibbell would later place LambdaMOO’s ascendancy as taking place “about halfway between the first time you heard the words information superhighway and the first time you wished you never had.”9 Attracting attention from first specialist and then mainstream media, it seemed a dizzyingly immediate example of the coming future, the opening of a digital utopia where anyone could have the powers of a god.

This heady vision was intoxicating and often addictive. “They were the seductions natural to any world built from the stuff of books and maps,” Dibbell later wrote, “the siren song of possibility.”9 Nearly every article or book on MUDs and MOOs written in the 90s included a warning of some kind. One book had a four-page section asking whether virtual worlds were “a hobby or an addiction,”20 noting that many a college student had dropped out of classes to spend hour after hour in the computer lab, living inside them. Some joked that the acronym stood for Multi-Undergraduate Destroyers. A Wired reporter assigned to write a feature on “Why playing MUDs is becoming the addiction of the 90s” ended up becoming addicted himself, racking up huge bills with his internet service provider and writing in the article’s conclusion, somewhat desperately, that “weeks have gone by and I find myself unable to stop MOOing.”16 He compared LambdaMOO to LSD.

One estimate guesses that MUDs made up 10 percent of all internet traffic in 1993.1 A rumor spread that Australia had established a continentwide ban on mudding, lest it clog up the country’s connection to the rest of the real world with descriptions of virtual ones. The rumor proved unfounded but it had seemed entirely plausible.18 In later years the graphical MMOs that descended from MUDs would prove equally compelling, but the fact that even their prose-based ancestors had been so hypnotic suggests that the notion of a “textual virtual reality” was no naïve oxymoron.

MUDs had been attracting increasing attention from academics and journalists throughout the early 90s, but LambdaMOO was thrust onto the national stage with a Village Voice article in 1993 called “A Rape in Cyberspace.”8 Written by Julian Dibbell, it described an incident that had taken place in the game earlier that year. An object called a voodoo doll had been created that its owner could reshape to look like a particular character, then type FORCE DOLL TO do something to make it seem as if that character was taking actions their player had not initiated. One night, in the very public space of the Living Room, a player dressed as a perverted clown used a voodoo doll to make two women appear to do disturbing, violent, and sexual things to each other and to onlookers, much to their players’ horror and distress. The incident had sparked a blaze of discussion in the previously laissez-faire community about standards of behavior and where disciplinary power should be vested. Dibbell’s article, musing about the morality of communities where words literally instantiated consensus reality, struck a nerve that would prove resonant across future decades. Noting that while no physical crime had occurred in the real world, the women involved still felt violated, Dibbell began to question sharp lines between words and action he had once held firm to: “The more seriously I took the notion of virtual rape, the less seriously I was able to take the notion of freedom of speech, with its tidy division of the world into the symbolic and the real.”

The incident came in the midst of a remarkable transition of power on LambdaMOO. A few months earlier the system admins, exhausted by the constant stream of player disputes and moderation requests, announced that they were “pulling out of the discipline/manners/arbitration business; we’re handing the burden and freedom of that role to the society at large.”12 But in lieu of any formal replacement for admin policing, the question of who, if anyone, now had the power to ban a virtual rapist went unanswered. Eventually one admin banned the perpetrator on his own initiative, but this too proved controversial. Many residents had come to think of Lambda House as a second home—one where some of their most intense social connections were centered—and the notion that an arbitrary whim could expel you from it forever was anathema.

In the wake of public outcry, the admins set up a formal in-game system for petitions and balloting that let any player whose idea captured two-thirds of the popular vote deliver a mandate to the developers. They would implement any passing proposal that met certain legal and feasibility standards, from banning a specific player, to reprogramming core systems, to even shutting the whole thing down if that was what the player base wanted. This high-minded experiment—the admins as obedient servants of the people’s will—inspired a flurry of activity both inside and outside the community. Petitions on all kinds of topics, from trivial to world-breaking, were circulated, discussed, and debated endlessly. Political science, law, and sociology academics descended on LambdaMOO in swarms to observe a civilization pulling itself out of anarchy from first principles. Curtis’s PARC experiment into advancing the evolution of virtual worlds seemed to be bearing real fruit.

But, perhaps predictably, the petition system led to an increasingly vitriolic environment, accompanied by all the hostility and bitterness that comes with real-world politicking, moral crusades, and battles for ideological survival. While LambdaMOO’s population continued to grow, much of its core community slowly stopped logging in. All the fun had been leached out of their virtual playground, replaced by something that smacked far too much of reality. Curtis would later reflect:

	We see these communities form whenever technology changes. Every time we give people another mechanism to communicate, they latch onto it. And then we see human nature happen again. People. Some of them will be assholes, some of them will care an enormous amount. Some will be beautiful and wonderful and some will be hateful and awful. There’s such a hunger for these kinds of systems, [but] then human nature does what we expect it to do if we’re paying attention at all, and there will always be people who are disappointed because they thought, this time—this time it is pure.15

Mudding never really died, but its player base became subsumed by far larger crowds attracted to the graphical descendants emerging by the late 90s. MUDs gave way to MMOs (massively multiplayer online games) like Ultima Online [Electronic Arts 1997], EverQuest [Sony Online Entertainment 1999], and Star Wars Galaxies [Sony Online Entertainment 2003]. These were more than mere spiritual successors: many were designed by teams of former mudders, and often adopted concepts, designs, and lingo whole cloth from their textual ancestors.

But few graphical MUDs dared give players the powers of a MOO—neither the wizardly tools of creation, nor the radically democratic notions of a self-guided community. Perhaps the most famous exception came with Linden Lab’s Second Life [2003], which at first attracted hype similar to LambdaMOO’s a decade earlier for its dream of a player-made world. But 3D objects are much harder to model and animate believably than textual ones, making most user content seem amateurish, and the company’s focus on commercial transactions turned vast swaths of the game’s terrain into virtual strip malls, soulless and exploitative. For many years Second Life was held up as the exception that proved the rule: giving players too much creative power was as difficult as it was dangerous. In most online spaces from the 2000s on, all a user could really change about the world was their own appearance—within the carefully curated limits of a nose-length slider or a set of preapproved skin tones.

Yet, in the last decade, new seeds of player creativity have grown from the soil of games like Minecraft [Mojang Studios 2011] and platforms like Roblox [Roblox Corporation 2006]. On the MOO in the early 90s, hundreds of people who had never considered themselves coders or writers discovered the joy of creating something strange or beautiful or funny or functional and sharing it with friends. Today, millions find the same kind of thrill in new virtual spaces that embrace player creativity, cobbling together JavaScript or Lua instead of MOO-code, wrangling voxels or textures instead of words. These new games, too, have become places for community and connection, in part because they are places rather than the dimensionless abstractions of social media—places you choose when to enter and when to leave, filled with people you can approach or stay away from, and inhabited by a virtual body that can emote and perform, not just post. The 2020s may accelerate awareness of something that seemed obvious to many MOOers decades earlier: conversations need the context of space, and a virtual community ought to feel like a home.

LambdaMOO is still running as of this writing, but is a strange place to visit, both heavy with the dust of ages and as fresh and functional as the day its code first ran. A public bulletin board in the library exhibits surreal temporal collapse: an ad for a long-defunct BBS with a high-speed 14.4k modem sits alongside a note from a lonely Italian in quarantine with COVID-19. The last official news bulletin dates from 2004, yet the @who command still shows a dozen or so active players at any given moment, squirreled away in odd corners of the map, still @digging. The hundreds of useful generic objects created over the decades remain just as fertile as they were in 1991, their code ready for reuse in a new generation’s projects. 

Each player on the MOO is given a fixed quota of disk space, a rationing that prevents the community from exceeding the means of its hardware. As new players register characters, inactive players and objects are “reaped” to make room, in reverse order of how recently they’ve logged in or been used. During the MOO’s height of popularity, reaping could happen to inactive players as soon as six weeks after their last login. Today, one can avoid the reaper far longer—but not indefinitely. Within the house you can find an auction block where soon-to-be-reaped objects, rooms, and generic classes are up for grabs, transferable to any active players who might want to claim them. Perusing these digital discards provokes a strange ennui. A tank missile, a bucket, a pair of angelic handcuffs, a skull-topped staff, a galaxy; rooms called Secluded Jungle Hot Tub, Generic Shower Stall, the Library of Rosecliff, or Under a Starry Sky. Which, if any, are worth saving? Once a player has been logged off for too long, their avatar appears to be sleeping, and wandering the map today can feel like exploring an enchanted kingdom of sleeping beauties, some of whom have been asleep for decades.

Yet Lambda House still intrigues. Exploration remains perpetually magical: unlike in a single-author text game, here you never find the limits of the world model or the edges of the map. The next object might always have a new verb programmed into it, and behind any corner might lie a new domain. Listening to a seashell in a gazebo transports you to a lazy tropical paradise; winding a music box in a hidden glade summons ghostly figures to enact a tableau from Keats. Rooms with dynamic descriptions responding to the seasons and the time of day keep cycling through the hours, virtual moons moving through their phases above. Even with most of the people gone, the code they left behind keeps Lambda House alive. 


References

1) Bartle, Richard A. 2004. Designing Virtual Worlds. New Riders.
2) Benedikt, Claire Lisette, and Dave Ciskowski. 1995. MUDs: Exploring Virtual Worlds on the Internet. BradyGames.
3) Burka, Lauren P. 1995. The MUDLine. www.linnaean.org/~lpb/muddex/mudline.html | a Jun 3, 2020
4) Curtis, Pavel. 1992. “Mudding: Social Phenomena in Text-Based Virtual Realities.” In High Noon on the Electronic Frontier: Conceptual Issues in Cyberspace, 1992.
5) Curtis, Pavel, and David A. Nichols. 1994. “MUDs Grow up: Social Virtual Reality in the Real World.” In Proceedings of COMPCON’94, IEEE.
6) Curtis, Pavel. 1997. “LambdaMOO Programmer’s Manual.” hayseed.net/MOO/manuals/ProgrammersManual.html | a Jun 3, 2020
7) Curtis, Pavel. 2001. “Not Just a Game: How LambdaMOO Came to Exist and What It Did To Get Back At Me.” In High Wired: On the Design, Use, and Theory of Educational MOOs, ed. Cynthia A. Haynes and Jan Rune Holmevik. University of Michigan Press.
8) Dibbell, Julian. 1993. “A Rape in Cyberspace.” The Village Voice, Dec 23, 1993.
9) Dibbell, Julian. 1998. My Tiny Life: Crime and Passion in a Virtual World. New York: Holt.
10) Evans, Claire L. 2018. “A Mansion Filled With Hidden Worlds: When the Internet Was Young.” Undark Magazine (blog). Jul 20, 2018. undark.org/2018/07/20/wilo-evans-broad-band | a Jun 3, 2020
11) Funkhouser, Chris. 2002. Whereis Mineral: Adventures in MOO. Self-published.
12) Haakon. 1992. “LambdaMOO Takes A New Direction.” Post to LambdaMOO *News list. Dec 9, 1992. 
13) Hess, Elizabeth. 2003. Yib’s Guide to MOOing: Getting the Most From Virtual Communities on the Internet. Self-published.
14) Koster, Raph. 2000. The Online World Timeline. Mar 4, 2000. www.raphkoster.com/games/the-online-world-timeline | a Jun 3, 2020
15) Laurel, Brenda. 2013. Computers as Theatre. 2nd ed. Addison-Wesley.
16) Quittner, Josh. 1994. “Johnny Manhattan Meets the Furry Muckers.” Wired 2 (3), Mar 1, 1994. www.wired.com/1994/03/muds-3 | a Jun 3, 2020
17) Randall, Neil. 1994. Teach Yourself the Internet: Around the World in 21 Days. Sams.
18) Reid, Elizabeth. 1994. “Are MUDs Banned in Australia?” Computer-Mediated Communication Magazine 1 (4), Aug 1, 1994.
19) Rheingold, Howard. 1994. “PARC Is Back!” Wired, Feb 1, 1994. www.wired.com/1994/02/parc | a Jun 3, 2020
20) Shah, Rawn, and Jim Romine. 1995. Playing MUDS on the Internet. John Wiley & Sons, Inc.
21) Sundsted, Todd. 2014. “Keeping Old Code Alive: The Venerable LambdaMOO Server in 2014.” Presented at Hope X, New York City, July 20. www.youtube.com/watch?v=SxGbHYGTGWw | a Jun 3, 2020
22) Wisner, Bill. 1990. “A Brief (and Very Incomplete) History of MUDs.” Usenet post, rec.games.mud, Sep 28, 1990. groups.google.com/forum/#!msg/rec.games.mud/B6pib_EkVeg/TgdA5l8lwGoJ | a Jun 3, 2020
